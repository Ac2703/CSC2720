class Graph:
    def __init__(self,V): # Constructor
        self.V = V # No. of vertices
        self.adj = [[] for i in range(V)] # adjacency lists

    def addEdge(self,v, w): # to add an edge to graph
        self.adj[v].append(w) # Add w to the list of v.

    def rDepthFirst(self, output : list, visited, curr):
        # if it's not visited
        if curr not in visited:
            # mark visited
            visited.add(curr)
            # add to output list
            output.append(curr)
            # go through adjacency list
            for i in self.adj[curr]:
                # recurse on each connection in list
                self.rDepthFirst(output, visited, i) 
        
        return
    
    def depthFirst(self,firstNode):
        if len(self.adj) == 0:
            return ("No vertices.")
        
        
        output= []
        visited = set()
        self.rDepthFirst(output, visited, firstNode)
        return output



def main():
    g = Graph(6)

    #Create graph instance called g
    #g.addEdge(0, 1)
    #g.addEdge(0, 2)
    g.addEdge(2, 3)
    g.addEdge(2, 4)
    g.addEdge(4, 5)
    g.addEdge(1, 3)
    g.addEdge(3, 5)

    # Call the Function
    print(g.depthFirst(0))

    # Time Complexity: O(V+E)
    # Space Complexity: O(V)

    # Test Cases

    # No Vertices
    # List would be empty
    # g = Graph(0)
    # Expected Output: "No vertices."

    # No Edges on Starting Vertex
    # g = Graph(6)
    # Expected Output: [0]
    # (The input vertex)

main()

